{"version":3,"sources":["utils/getIconById.js","utils/convertTempUnits.js","store/actions.js","components/FavoriteCard.jsx","pages/Favorite.jsx"],"names":["mapIconIds","1","2","3","4","5","6","7","8","11","12","13","14","15","16","17","18","19","20","21","22","23","24","25","26","29","30","31","32","33","34","35","36","37","38","39","40","41","42","43","44","getIconById","id","CelsiusToFahrenheit","temp","toFixed","API_KEY","fetchLocationCodeURL","locationName","fetchWeatherURL","locationCode","fetchOneDayWeatherURL","fetchLocationCode","dispatch","a","type","payload","url","axios","get","response","data","length","parsedRes","map","city","key","Key","name","LocalizedName","country","AdministrativeArea","Country","fetchWeather","console","log","JSON","stringify","parsedResponse","DailyForecasts","dayForcast","Date","Unit","Temperature","Minimum","Value","Maximum","Day","Icon","IconPhrase","HasPrecipitation","Night","fetchOneDayWeather","locationCodes","forEach","err","toggleLocationToFavorite","favoriteItem","useStyles","makeStyles","theme","card","minWidth","media","height","paddingTop","title","fontSize","pos","marginBottom","container","spacing","FavoriteCard","favoriteWeather","favorite","classes","React","useState","partOfDay","setPartOfDay","temperatureFahrenheit","setTemperatureFahrenheit","onChangeTempratureUnit","tempInCelsius","Grid","className","direction","justify","alignItems","Button","size","onClick","b","p","fav","weather","isEmpty","item","xs","Card","variant","CardContent","Typography","component","CardMedia","image","connect","state","oneDayWeather","bindActionCreators","fetchFavoriteWeather","fetchFavoriteWeatherAction","fetchFavoritesWeather","useCallback","favoriteCodes","f","useEffect"],"mappings":"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","file":"static/js/5.a6d8cd8d.chunk.js","sourcesContent":["const mapIconIds = {\n  1: \"https://developer.accuweather.com/sites/default/files/01-s.png\",\n  2: \"https://developer.accuweather.com/sites/default/files/02-s.png\",\n  3: \"https://developer.accuweather.com/sites/default/files/03-s.png\",\n  4: \"https://developer.accuweather.com/sites/default/files/04-s.png\",\n  5: \"https://developer.accuweather.com/sites/default/files/05-s.png\",\n  6: \"https://developer.accuweather.com/sites/default/files/06-s.png\",\n  7: \"https://developer.accuweather.com/sites/default/files/07-s.png\",\n  8: \"https://developer.accuweather.com/sites/default/files/08-s.png\",\n  11: \"https://developer.accuweather.com/sites/default/files/11-s.png\",\n  12: \"https://developer.accuweather.com/sites/default/files/12-s.png\",\n  13: \"https://developer.accuweather.com/sites/default/files/13-s.png\",\n  14: \"https://developer.accuweather.com/sites/default/files/14-s.png\",\n  15: \"https://developer.accuweather.com/sites/default/files/15-s.png\",\n  16: \"https://developer.accuweather.com/sites/default/files/16-s.png\",\n  17: \"https://developer.accuweather.com/sites/default/files/17-s.png\",\n  18: \"https://developer.accuweather.com/sites/default/files/18-s.png\",\n  19: \"https://developer.accuweather.com/sites/default/files/19-s.png\",\n  20: \"https://developer.accuweather.com/sites/default/files/20-s.png\",\n  21: \"https://developer.accuweather.com/sites/default/files/21-s.png\",\n  22: \"https://developer.accuweather.com/sites/default/files/22-s.png\",\n  23: \"https://developer.accuweather.com/sites/default/files/23-s.png\",\n  24: \"https://developer.accuweather.com/sites/default/files/24-s.png\",\n  25: \"https://developer.accuweather.com/sites/default/files/25-s.png\",\n  26: \"https://developer.accuweather.com/sites/default/files/26-s.png\",\n  29: \"https://developer.accuweather.com/sites/default/files/29-s.png\",\n  30: \"https://developer.accuweather.com/sites/default/files/30-s.png\",\n  31: \"https://developer.accuweather.com/sites/default/files/31-s.png\",\n  32: \"https://developer.accuweather.com/sites/default/files/32-s.png\",\n  33: \"https://developer.accuweather.com/sites/default/files/33-s.png\",\n  34: \"https://developer.accuweather.com/sites/default/files/34-s.png\",\n  35: \"https://developer.accuweather.com/sites/default/files/35-s.png\",\n  36: \"https://developer.accuweather.com/sites/default/files/36-s.png\",\n  37: \"https://developer.accuweather.com/sites/default/files/37-s.png\",\n  38: \"https://developer.accuweather.com/sites/default/files/38-s.png\",\n  39: \"https://developer.accuweather.com/sites/default/files/39-s.png\",\n  40: \"https://developer.accuweather.com/sites/default/files/40-s.png\",\n  41: \"https://developer.accuweather.com/sites/default/files/41-s.png\",\n  42: \"https://developer.accuweather.com/sites/default/files/42-s.png\",\n  43: \"https://developer.accuweather.com/sites/default/files/43-s.png\",\n  44: \"https://developer.accuweather.com/sites/default/files/44-s.png\",\n};\n\nconst getIconById = (id) => {\n  return mapIconIds[id];\n};\nexport default getIconById;\n","const CelsiusToFahrenheit = (temp) => {\n  const tempInFahrenheit = (temp * 9) / 5 + 32;\n  return tempInFahrenheit.toFixed(2);\n};\nconst FahrenheitToCelsius = (temp) => {\n  const tempInCelsius = ((temp - 32) * 5) / 9;\n  return tempInCelsius.toFixed(2);\n};\n\nexport { CelsiusToFahrenheit, FahrenheitToCelsius };\n","import axios from \"axios\";\nconst API_KEY = \"Jk0eCaZKTjS35inGGK8R9r8R0bFxgGB5\";\nconst fetchLocationCodeURL = (locationName) =>\n  `https://dataservice.accuweather.com/locations/v1/cities/autocomplete?apikey=${API_KEY}&q=${locationName}`;\nconst fetchWeatherURL = (locationCode) =>\n  `https://dataservice.accuweather.com/forecasts/v1/daily/5day/${locationCode}?apikey=${API_KEY}&metric=true`;\nconst fetchOneDayWeatherURL = (locationCode) =>\n  `https://dataservice.accuweather.com/forecasts/v1/daily/1day/${locationCode}?apikey=${API_KEY}&metric=true`;\n\nexport const fetchLocationCode = (locationName) => async (dispatch) => {\n  if (!locationName) {\n    return dispatch({\n      type: \"FETCH_CITIES_CODE\",\n      payload: [],\n    });\n  }\n  try {\n    const url = fetchLocationCodeURL(locationName);\n    const response = await axios.get(url);\n    if (response.data.length > 1) {\n      const parsedRes = response.data.map((city) => {\n        return {\n          key: city.Key,\n          name: city.LocalizedName,\n          country:\n            city.AdministrativeArea.LocalizedName +\n            \",\" +\n            city.Country.LocalizedName,\n        };\n      });\n      return dispatch({\n        type: \"FETCH_CITIES_CODE\",\n        payload: parsedRes,\n      });\n    } else {\n      return dispatch(fetchWeather(response.data[0].Key));\n    }\n  } catch (err) {\n    console.log(\"Got an error!\", JSON.stringify(err));\n  }\n};\nexport const fetchWeather = (locationCode) => async (dispatch) => {\n  try {\n    const url = fetchWeatherURL(locationCode);\n    const response = await axios.get(url);\n    const parsedResponse = {\n      DailyForecasts: response.data.DailyForecasts.map((dayForcast) => {\n        return {\n          Date: dayForcast.Date,\n          Unit: dayForcast.Temperature.Minimum.Unit,\n          Temperature: {\n            Minimum: dayForcast.Temperature.Minimum.Value,\n            Maximum: dayForcast.Temperature.Maximum.Value,\n          },\n          Day: {\n            Icon: dayForcast.Day.Icon,\n            IconPhrase: dayForcast.Day.IconPhrase,\n            HasPrecipitation: dayForcast.Day.HasPrecipitation,\n          },\n          Night: {\n            Icon: dayForcast.Night.Icon,\n            IconPhrase: dayForcast.Night.IconPhrase,\n            HasPrecipitation: dayForcast.Night.HasPrecipitation,\n          },\n        };\n      }),\n    };\n    return dispatch({\n      type: \"FETCH_WEATHER\",\n      payload: {\n        Key: locationCode,\n        DailyForecasts: parsedResponse.DailyForecasts,\n      },\n    });\n  } catch (err) {\n    console.log(\"Got an error!\", JSON.stringify(err));\n  }\n};\nexport const fetchOneDayWeather = (locationCodes) => (dispatch) => {\n  try {\n    locationCodes.forEach(async (locationCode) => {\n      const url = fetchOneDayWeatherURL(locationCode);\n      const response = await axios.get(url);\n      return dispatch({\n        type: \"FETCH_ONE_DAY_WEATHER\",\n        payload: { response: response.data, locationCode },\n      });\n    });\n  } catch (err) {\n    console.log(\"Got an error!\", JSON.stringify(err));\n  }\n};\nexport const toggleLocationToFavorite = (favoriteItem) => (dispatch) => {\n  return dispatch({\n    type: \"TOGGLE_FAVORITE\",\n    payload: favoriteItem,\n  });\n};\n","import React from \"react\";\nimport {\n  CardMedia,\n  Grid,\n  Typography,\n  Card,\n  CardContent,\n  Button,\n  makeStyles,\n} from \"@material-ui/core\";\nimport getIconById from \"../utils/getIconById\";\nimport { CelsiusToFahrenheit } from \"../utils/convertTempUnits\";\nimport PropTypes from \"prop-types\";\nimport { isEmpty } from \"lodash\";\nconst useStyles = makeStyles((theme) => ({\n  card: {\n    minWidth: 275,\n  },\n  media: {\n    height: 0,\n    paddingTop: \"56.25%\", // 16:9\n  },\n  title: {\n    fontSize: 14,\n  },\n  pos: {\n    marginBottom: 12,\n  },\n  container: {\n    marginBottom: theme.spacing(2),\n  },\n}));\n\nconst FavoriteCard = ({ favoriteWeather, favorite }) => {\n  const classes = useStyles();\n  const [partOfDay, setPartOfDay] = React.useState(\"Day\");\n  const [temperatureFahrenheit, setTemperatureFahrenheit] = React.useState(\n    false\n  );\n\n  const onChangePartOfDay = () => {\n    return setPartOfDay((p) => {\n      return p === \"Day\" ? \"Night\" : \"Day\";\n    });\n  };\n  const onChangeTempratureUnit = (tempInCelsius) => {\n    return temperatureFahrenheit\n      ? CelsiusToFahrenheit(tempInCelsius)\n      : tempInCelsius;\n  };\n\n  return (\n    <>\n      <Grid\n        className={classes.container}\n        container\n        direction=\"row\"\n        spacing={3}\n        justify=\"center\"\n        alignItems=\"center\"\n      >\n        <Button\n          size=\"small\"\n          onClick={() => setTemperatureFahrenheit((b) => !b)}\n        >\n          Change To {temperatureFahrenheit ? \"Celsius\" : \"Fahrenheit\"}\n        </Button>\n\n        <Button size=\"small\" onClick={() => onChangePartOfDay()}>\n          View {partOfDay === \"Day\" ? \"Night\" : \"Day\"}\n        </Button>\n      </Grid>\n      <Grid\n        className={classes.container}\n        container\n        direction=\"row\"\n        spacing={3}\n        justify=\"space-around\"\n        alignItems=\"center\"\n      >\n        {favorite.map((fav) => {\n          const weather = favoriteWeather[fav.key];\n          const title = fav.name;\n          if (isEmpty(weather)) return <h1 key={fav.key}>loading...</h1>;\n          return (\n            <Grid key={fav.key} item xs={\"auto\"}>\n              <Card className={classes.card} variant=\"outlined\">\n                <CardContent>\n                  <Typography variant=\"h5\" component=\"h2\">\n                    {title}\n                  </Typography>\n                  <Typography className={classes.pos}>\n                    {`The Temperature will range`} <br />\n                    {`from ${onChangeTempratureUnit(\n                      weather.Temperature.Minimum\n                    )}${\n                      temperatureFahrenheit ? \"F\" : \"C\"\n                    } to ${onChangeTempratureUnit(\n                      weather.Temperature.Maximum\n                    )}${temperatureFahrenheit ? \"F\" : \"C\"}`}\n                  </Typography>\n                  <Typography variant=\"body2\" component=\"p\">\n                    The {partOfDay} will be {weather[partOfDay].IconPhrase}\n                  </Typography>\n                </CardContent>\n                <CardMedia\n                  className={classes.media}\n                  image={getIconById(weather[partOfDay].Icon)}\n                  title={weather[partOfDay].IconPhrase}\n                />\n              </Card>\n            </Grid>\n          );\n        })}\n      </Grid>\n    </>\n  );\n};\nFavoriteCard.propTypes = {\n  favoriteWeather: PropTypes.any,\n  favorite: PropTypes.array,\n};\nexport default FavoriteCard;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { connect } from \"react-redux\";\nimport { bindActionCreators } from \"redux\";\nimport { Typography } from \"@material-ui/core\";\nimport { fetchOneDayWeather as fetchFavoriteWeatherAction } from \"../store/actions\";\nimport FavoriteCard from \"../components/FavoriteCard\";\n\nconst Favorite = ({ favorite, favoriteWeather, fetchFavoriteWeather }) => {\n  const fetchFavoritesWeather = React.useCallback(async () => {\n    const favoriteCodes = favorite.map((f) => f.key);\n    await fetchFavoriteWeather(favoriteCodes);\n  }, [favorite, fetchFavoriteWeather]);\n  React.useEffect(() => {\n    fetchFavoritesWeather();\n  }, []);\n\n  return (\n    <>\n      <Typography>Your Favorite Locations</Typography>\n\n      <FavoriteCard\n        key={favorite.length}\n        favoriteWeather={favoriteWeather}\n        favorite={favorite}\n      />\n    </>\n  );\n};\nFavorite.propTypes = {\n  props: PropTypes.any,\n};\n\nconst mapStateToProps = (state) => {\n  return {\n    favoriteWeather: state.oneDayWeather,\n    favorite: state.favorite,\n  };\n};\nconst mapDispatchToProps = (dispatch) =>\n  bindActionCreators(\n    {\n      fetchFavoriteWeather: fetchFavoriteWeatherAction,\n    },\n    dispatch\n  );\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Favorite);\n"],"sourceRoot":""}